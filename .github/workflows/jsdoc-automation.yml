name: JSDoc Automation

on:
  workflow_dispatch:
    inputs:
      pull_number:
        description: 'Pull Request Number (optional - if not provided, scans entire directory)'
        required: false
        type: string
      root_directory:
        description: 'Directory to scan (relative to repository root, e.g., packages/core/src)'
        required: true
        default: 'packages/core/src/test_resources'
        type: string
      excluded_directories:
        description: 'Directories to exclude from scanning (comma-separated, relative to root_directory)'
        required: true
        default: 'node_modules,dist,test'
        type: string
      reviewers:
        description: 'Pull Request Reviewers (comma-separated GitHub usernames)'
        required: true
        default: ''
        type: string

jobs:
  generate-docs:
    runs-on: ubuntu-latest

    env:
      GITHUB_ACCESS_TOKEN: ${{ secrets.GH_PAT }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better git operations

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'  # Using LTS version for better stability

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            node_modules/.pnpm
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Validate inputs and directory structure
        run: |
          # Check root_directory format
          if [[ "${{ github.event.inputs.root_directory }}" == /* ]]; then
            echo "Error: root_directory should be relative to repository root (no leading slash)"
            exit 1
          fi

          # Ensure packages/jsdoc-automation exists
          if [ ! -d "packages/jsdoc-automation" ]; then
            echo "Error: jsdoc-automation package not found"
            exit 1
          fi

          # Verify package.json exists
          if [ ! -f "packages/jsdoc-automation/package.json" ]; then
            echo "Error: package.json not found in jsdoc-automation"
            exit 1
          fi

      - name: Install root dependencies
        run: pnpm install --frozen-lockfile

      - name: Install and build jsdoc-automation
        working-directory: packages/jsdoc-automation
        run: |
          echo "Installing jsdoc-automation dependencies..."
          pnpm install --frozen-lockfile
          echo "Building jsdoc-automation..."
          pnpm build || true  # Add build step if needed, otherwise remove this line

      - name: Run documentation generator
        working-directory: packages/jsdoc-automation
        run: |
          echo "Starting documentation generation..."
          pnpm start